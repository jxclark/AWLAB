// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(uuid())
  email                 String    @unique
  password              String
  firstName             String
  lastName              String
  role                  Role      @default(USER)
  isActive              Boolean   @default(true)
  isEmailVerified       Boolean   @default(false)
  mustChangePassword    Boolean   @default(false)
  emailVerificationToken String?  @unique
  emailVerificationExpiry DateTime?
  passwordResetToken    String?   @unique
  passwordResetExpiry   DateTime?
  lastLoginAt           DateTime?
  lastLoginIp           String?
  failedLoginAttempts   Int       @default(0)
  lockedUntil           DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  sessions        Session[]
  auditLogs       AuditLog[]
  loginHistory    LoginHistory[]
  passwordHistory PasswordHistory[]
  devices         Device[]
}

enum Role {
  SUPER_ADMIN
  ADMIN
  MANAGER
  USER
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String
  action    String
  resource  String?
  details   Json?
  ipAddress String?
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LoginHistory {
  id          String   @id @default(uuid())
  userId      String
  ipAddress   String?
  userAgent   String?
  device      String?
  location    String?
  success     Boolean
  failReason  String?
  createdAt   DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([createdAt])
}

model PasswordHistory {
  id        String   @id @default(uuid())
  userId    String
  password  String
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model Device {
  id              String   @id @default(uuid())
  userId          String
  fingerprint     String   @unique
  deviceName      String
  deviceType      String?
  browser         String?
  browserVersion  String?
  os              String?
  osVersion       String?
  ipAddress       String?
  isTrusted       Boolean  @default(false)
  firstSeenAt     DateTime @default(now())
  lastSeenAt      DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([fingerprint])
}